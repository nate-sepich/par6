AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'Par6 Golf Backend API - FastAPI on AWS Lambda'

Globals:
  Function:
    Timeout: 30
    MemorySize: 512
    Runtime: python3.13
    Environment:
      Variables:
        ENVIRONMENT: !Ref Environment

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod]
    Description: Environment name

Resources:
  Par6ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Environment
      Cors:
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"
        AllowCredentials: false

  Par6Function:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'par6-api-${Environment}'
      CodeUri: src/
      Handler: app.lambda_handler
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref Par6ApiGateway
            Path: /{proxy+}
            Method: ANY
        RootApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref Par6ApiGateway
            Path: /
            Method: ANY
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          USERS_TABLE: !Ref UsersTable
          SESSIONS_TABLE: !Ref SessionsTable
          SCORES_TABLE: !Ref ScoresTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
        - DynamoDBCrudPolicy:
            TableName: !Ref SessionsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref ScoresTable

  # Users Table - Store user profiles
  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'par6-users-${Environment}'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: user_id
          AttributeType: S
        - AttributeName: handle_lower
          AttributeType: S
      KeySchema:
        - AttributeName: user_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: HandleIndex
          KeySchema:
            - AttributeName: handle_lower
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: !If [IsProd, true, false]

  # Sessions Table - Store user session tokens
  SessionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'par6-sessions-${Environment}'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: session_token
          AttributeType: S
      KeySchema:
        - AttributeName: session_token
          KeyType: HASH
      TimeToLiveSpecification:
        AttributeName: expires_at
        Enabled: true
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: !If [IsProd, true, false]

  # Scores Table - Store user game scores
  ScoresTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'par6-scores-${Environment}'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: score_id
          AttributeType: S
        - AttributeName: user_id
          AttributeType: S
        - AttributeName: puzzle_date
          AttributeType: S
      KeySchema:
        - AttributeName: score_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: UserDateIndex
          KeySchema:
            - AttributeName: user_id
              KeyType: HASH
            - AttributeName: puzzle_date
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: DateIndex
          KeySchema:
            - AttributeName: puzzle_date
              KeyType: HASH
            - AttributeName: score_id
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: !If [IsProd, true, false]

Conditions:
  IsProd: !Equals [!Ref Environment, 'prod']

Outputs:
  ApiGatewayUrl:
    Description: 'API Gateway endpoint URL'
    Value: !Sub 'https://${Par6ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}'
    Export:
      Name: !Sub '${AWS::StackName}-ApiUrl'
  
  FunctionArn:
    Description: 'Par6 Lambda Function ARN'
    Value: !GetAtt Par6Function.Arn
    Export:
      Name: !Sub '${AWS::StackName}-FunctionArn'
  
  UsersTableName:
    Description: 'Users Table Name'
    Value: !Ref UsersTable
    Export:
      Name: !Sub '${AWS::StackName}-UsersTable'
  
  SessionsTableName:
    Description: 'Sessions Table Name'
    Value: !Ref SessionsTable
    Export:
      Name: !Sub '${AWS::StackName}-SessionsTable'
  
  ScoresTableName:
    Description: 'Scores Table Name'
    Value: !Ref ScoresTable
    Export:
      Name: !Sub '${AWS::StackName}-ScoresTable'